name: Branch Names
description: Retrieve giithub branch or tag information without the /ref/* prefix
author: tj-actions
inputs:
  strip_tag_prefix:
    description: 'The prefix that should be stripped from the tag e.g `v0.0.1` -> `(strip v)` -> `0.0.1`'
    default: ''
    required: false

outputs:
  is_default:
    value: ${{ steps.default.outputs.is_default }}
    description: 'Returns `"true"` if the current branch is the default else `"false"`.'
  default_branch:
    value: ${{ steps.default.outputs.default_branch }}
    description: 'The default branch name e.g `main` OR `master`'
  is_tag:
    value: ${{ steps.tag.outputs.is_tag }}
    description: 'Returns `"true"` if the current branch is a tag else `"false"`.'
  current_branch:
    value: ${{ github.ref_name }}
    description: 'The current branch name. NOTE: This field would be deprecated in a future release as it is now natively supported via github.ref_name.'
  base_ref_branch:
    value: ${{ steps.branch.outputs.base_ref_branch }}
    description: 'The target branch of a pull request e.g `main`'
  head_ref_branch:
    value: ${{ steps.branch.outputs.head_ref_branch }}
    description: 'The source branch of a pull request e.g `feature/test`'
  ref_branch:
    value: ${{ steps.branch.outputs.ref_branch }}
    description: 'The branch that triggered the workflow run. e.g `1/merge`, `main`'
  tag:
    value: ${{ steps.tag.outputs.tag }}
    description: 'The tag that triggered the workflow run. e.g `v0.0.1`, `0.0.1`'

runs:
  using: "composite"
  steps:
    - id: branch
      run: |
        if [[ "${{ github.ref }}" != "refs/tags/"* ]]; then
          BASE_REF=$(printf "%q" "${{ github.base_ref }}")
          HEAD_REF=$(printf "%q" "${{ github.head_ref }}")
          REF=$(printf "%q" "${{ github.ref }}")

          BASE_REF=${BASE_REF/refs\/heads\//}
          HEAD_REF=${HEAD_REF/refs\/heads\//}

          echo "::set-output name=base_ref_branch::$(eval printf "%s" "$BASE_REF")"
          echo "::set-output name=head_ref_branch::$(eval printf "%s" "$HEAD_REF")"

          REF_BRANCH=${REF/refs\/pull\//}
          REF_BRANCH=${REF_BRANCH/refs\/heads\//}

          echo "::set-output name=ref_branch::$(eval printf "%s" "$REF_BRANCH")"
        fi
      shell: bash
    - id: default
      run: |
        if [[ "${{ github.ref }}" != "refs/tags/"* ]]; then
          if [[ "${{ github.ref_name }}" == "${{ steps.branch.outputs.ref_branch }}" ]]; then
            echo "::set-output name=is_default::true"
            echo "::set-output name=default_branch::${{ github.event.repository.default_branch }}"
          else
            echo "::set-output name=is_default::false"
            echo "::set-output name=default_branch::${{ github.event.repository.default_branch }}"
          fi
        fi
      shell: bash
    - id: tag
      run: |
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          REF=$(printf "%q" "${{ github.ref }}")
          TAG=${REF/refs\/tags\/${{ inputs.strip_tag_prefix }}/}

          echo "::set-output name=tag::$(eval printf "%s" "$TAG")"
          echo "::set-output name=is_tag::true"
        else
          echo "::set-output name=is_tag::false"
        fi
      shell: bash

branding:
  icon: git-branch
  color: white
